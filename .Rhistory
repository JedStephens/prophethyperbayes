library(devtools)
library(usethis)
use_r("prophet_crossvalidated")
use_r("prophet_rolling_crossvalidation")
library(devtools)
install.packages("roxygen2")
install.packages("rBayesianOptimization")
install.packages("forecast")
install.packages("prophet")
install.packages("testthat")
library(prophethyperbayes)
?prophethyperbayes::prophet_rolling_crossvalidation()
library(prophethyperbayes)
library(prophethyperbayes)
?person()
library(prophethyperbayes)
?cat()
library(foreach)
library(doParallel)
cl <- makeCluster(1)
?foreach()
stopImplicitCluster()
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
".\n"
"./n"
library(prophethyperbayes)
library(prophethyperbayes)
c(1)
c(1)[1]
library(prophethyperbayes)
library(prophethyperbayes)
?gc()
?rBayesianOptimization::BayesianOptimization()
use_r("suggested_init_points")
use_r("suggested_n_iter")
library(prophethyperbayes)
install.packages(c("clipr", "Rdpack"))
library(prophethyperbayes)
?rBayesianOptimization::BayesianOptimization()
rBayesianOptimization::BayesianOptimization
?foreach()
library(prophethyperbayes)
library(prophethyperbayes)
data.frame
data.frame(x=c(1,3,4), y = c(list(1), list(2), list(3))
data.frame(x=c(1,3,4), y = c(list(1), list(2), list(3)))
data.frame(x=c(1,3,4), y = c(list(1), list(2), list(3)))
library(prophethyperbayes)
lib
library(ggplot2)
library(prophethyperbayes)
?substitute()
?deparse()
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
?aes_string()
name <- "Jane"
list2(!!name := 1 + 2)
exprs(!!name := 1 + 2)
quos(!!name := 1 + 2)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
paste0(paste0("iteration",1,"line"))
enquo(paste0(paste0("iteration",1,"line")))
enquo((paste0("iteration",1,"line")))
?enquo()
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(prophethyperbayes)
library(ggplot2)
?geom_point()
library(prophethyperbayes)
?sym()
library(rlang)
?sym()
library(tidyverse)
process_starting_row  <- 600
per_validation_period <- 30
number_of_validations <- 5
graphical_data <- data.frame(x= 1:(process_starting_row + 1 + (number_of_validations)*per_validation_period))
for (it in 1:number_of_validations) {
# For this graph there is always a line and then a color component explaining each one...
graphical_data[,paste0("iteration",it,"line")]   <- c(it)
# First make the whole row grey and then "dolly up" the colors.
graphical_data[,paste0("iteration",it,"colour")] <- "grey"
graphical_data[1:(process_starting_row + (it-1)*per_validation_period), paste0("iteration",it,"colour")] <- "blue"
graphical_data[(process_starting_row + 1 + (it)*per_validation_period), paste0("iteration",it,"colour")] <- "red"
}
#graphical_data
ggbase <- ggplot(data = graphical_data, aes(x=x)) +
coord_cartesian(xlim = c(process_starting_row-1*per_validation_period, nrow(graphical_data))) +
theme_bw()
gg_adding <- function(data, iteration_sub, color_sub){
iteration_promise <- sym(iteration_sub)
colour_promise <- sym(color_sub)
gg  <- geom_point(data = data, aes(x= x, y= !! iteration_promise, color = !! colour_promise))
return(gg)
}
ggaddfor <- function(data, gg){
ggout <- gg
for (it in 1:number_of_validations) {
#print(it)
iterationsub <- paste0("iteration",it,"line")
coloursub <- paste0("iteration",it,"colour")
ggout <- ggout + gg_adding(data, iterationsub, coloursub)
}
return(ggout)
}
# Not working
ggaddfor(graphical_data, ggbase)
# VS
# Working...
ggadd <- ggbase
ggadd <- ggadd + gg_adding(graphical_data, iteration1line, iteration1colour)
ggadd <- ggadd + gg_adding(graphical_data, iteration2line, iteration2colour)
ggadd <- ggadd + gg_adding(graphical_data, iteration3line, iteration3colour)
ggadd <- ggadd + gg_adding(graphical_data, iteration4line, iteration4colour)
ggadd <- ggadd + gg_adding(graphical_data, iteration5line, iteration5colour)
#return(list(graph = ggout, data = graphical_data))
#https://dplyr.tidyverse.org/articles/programming.html
ggaddfor(graphical_data, ggbase)
ggiterated <- ggaddfor(graphical_data, ggbase)
ggfinal <- ggiterated + labs(x="Data points", y = "Iteration")
ggfinal
?scale_color_manual()
library(tidyverse)
process_starting_row  <- 600
per_validation_period <- 30
number_of_validations <- 5
graphical_data <- data.frame(x= 1:(process_starting_row + 1 + (number_of_validations)*per_validation_period))
for (it in 1:number_of_validations) {
# For this graph there is always a line and then a color component explaining each one...
graphical_data[,paste0("iteration",it,"line")]   <- c(it)
# First make the whole row grey and then "dolly up" the colors.
graphical_data[,paste0("iteration",it,"colour")] <- "grey"
graphical_data[1:(process_starting_row + (it-1)*per_validation_period), paste0("iteration",it,"colour")] <- "blue"
graphical_data[(process_starting_row + 1 + (it)*per_validation_period), paste0("iteration",it,"colour")] <- "red"
}
#graphical_data
ggbase <- ggplot(data = graphical_data, aes(x=x)) +
coord_cartesian(xlim = c(process_starting_row-1*per_validation_period, nrow(graphical_data))) +
theme_bw()
gg_adding <- function(data, iteration_sub, color_sub){
iteration_promise <- sym(iteration_sub)
colour_promise <- sym(color_sub)
gg  <- geom_point(data = data, aes(x= x, y= !! iteration_promise, color = !! colour_promise))
return(gg)
}
ggaddfor <- function(data, gg){
ggout <- gg
for (it in 1:number_of_validations) {
#print(it)
iterationsub <- paste0("iteration",it,"line")
coloursub <- paste0("iteration",it,"colour")
ggout <- ggout + gg_adding(data, iterationsub, coloursub)
}
return(ggout)
}
# Not working
ggiterated <- ggaddfor(graphical_data, ggbase)
ggfinal <- ggiterated + labs(x="Data points", y = "Iteration") + scale_color_manual(c("blue", "grey", "red"))
ggfinal
library(tidyverse)
process_starting_row  <- 600
per_validation_period <- 30
number_of_validations <- 5
graphical_data <- data.frame(x= 1:(process_starting_row + 1 + (number_of_validations)*per_validation_period))
for (it in 1:number_of_validations) {
# For this graph there is always a line and then a color component explaining each one...
graphical_data[,paste0("iteration",it,"line")]   <- c(it)
# First make the whole row grey and then "dolly up" the colors.
graphical_data[,paste0("iteration",it,"colour")] <- "grey"
graphical_data[1:(process_starting_row + (it-1)*per_validation_period), paste0("iteration",it,"colour")] <- "blue"
graphical_data[(process_starting_row + 1 + (it)*per_validation_period), paste0("iteration",it,"colour")] <- "red"
}
#graphical_data
ggbase <- ggplot(data = graphical_data, aes(x=x)) +
coord_cartesian(xlim = c(process_starting_row-1*per_validation_period, nrow(graphical_data))) +
theme_bw()
gg_adding <- function(data, iteration_sub, color_sub){
iteration_promise <- sym(iteration_sub)
colour_promise <- sym(color_sub)
gg  <- geom_point(data = data, aes(x= x, y= !! iteration_promise, color = !! colour_promise))
return(gg)
}
ggaddfor <- function(data, gg){
ggout <- gg
for (it in 1:number_of_validations) {
#print(it)
iterationsub <- paste0("iteration",it,"line")
coloursub <- paste0("iteration",it,"colour")
ggout <- ggout + gg_adding(data, iterationsub, coloursub)
}
return(ggout)
}
# Not working
ggiterated <- ggaddfor(graphical_data, ggbase)
ggfinal <- ggiterated + labs(x="Data points", y = "Iteration") + scale_color_manual(values = c("blue" = "blue", "grey" = "grey", "red" = "red"))
ggfinal
library(tidyverse)
process_starting_row  <- 600
per_validation_period <- 30
number_of_validations <- 5
graphical_data <- data.frame(x= 1:(process_starting_row + 1 + (number_of_validations)*per_validation_period))
for (it in 1:number_of_validations) {
# For this graph there is always a line and then a color component explaining each one...
graphical_data[,paste0("iteration",it,"line")]   <- c(it)
# First make the whole row grey and then "dolly up" the colors.
graphical_data[,paste0("iteration",it,"colour")] <- "grey"
graphical_data[1:(process_starting_row + (it-1)*per_validation_period), paste0("iteration",it,"colour")] <- "blue"
graphical_data[(process_starting_row + 1 + (it)*per_validation_period), paste0("iteration",it,"colour")] <- "red"
}
#graphical_data
ggbase <- ggplot(data = graphical_data, aes(x=x)) +
coord_cartesian(xlim = c(process_starting_row-1*per_validation_period, nrow(graphical_data))) +
theme_bw()
gg_adding <- function(data, iteration_sub, color_sub){
iteration_promise <- sym(iteration_sub)
colour_promise <- sym(color_sub)
gg  <- geom_point(data = data, aes(x= x, y= !! iteration_promise, color = !! colour_promise))
return(gg)
}
ggaddfor <- function(data, gg){
ggout <- gg
for (it in 1:number_of_validations) {
#print(it)
iterationsub <- paste0("iteration",it,"line")
coloursub <- paste0("iteration",it,"colour")
ggout <- ggout + gg_adding(data, iterationsub, coloursub)
}
return(ggout)
}
# Not working
ggiterated <- ggaddfor(graphical_data, ggbase)
ggfinal <- ggiterated + labs(x="Data points", y = "Iteration") + scale_color_manual(values = c("blue" = "blue", "grey" = "grey", "red" = "red")) + theme(legend.title = element_blank())
library(tidyverse)
process_starting_row  <- 600
per_validation_period <- 30
number_of_validations <- 5
graphical_data <- data.frame(x= 1:(process_starting_row + 1 + (number_of_validations)*per_validation_period))
for (it in 1:number_of_validations) {
# For this graph there is always a line and then a color component explaining each one...
graphical_data[,paste0("iteration",it,"line")]   <- c(it)
# First make the whole row grey and then "dolly up" the colors.
graphical_data[,paste0("iteration",it,"colour")] <- "grey"
graphical_data[1:(process_starting_row + (it-1)*per_validation_period), paste0("iteration",it,"colour")] <- "blue"
graphical_data[(process_starting_row + 1 + (it)*per_validation_period), paste0("iteration",it,"colour")] <- "red"
}
#graphical_data
ggbase <- ggplot(data = graphical_data, aes(x=x)) +
coord_cartesian(xlim = c(process_starting_row-1*per_validation_period, nrow(graphical_data))) +
theme_bw()
gg_adding <- function(data, iteration_sub, color_sub){
iteration_promise <- sym(iteration_sub)
colour_promise <- sym(color_sub)
gg  <- geom_point(data = data, aes(x= x, y= !! iteration_promise, color = !! colour_promise))
return(gg)
}
ggaddfor <- function(data, gg){
ggout <- gg
for (it in 1:number_of_validations) {
#print(it)
iterationsub <- paste0("iteration",it,"line")
coloursub <- paste0("iteration",it,"colour")
ggout <- ggout + gg_adding(data, iterationsub, coloursub)
}
return(ggout)
}
# Not working
ggiterated <- ggaddfor(graphical_data, ggbase)
ggfinal <- ggiterated + labs(x="Data points", y = "Iteration") + scale_color_manual(values = c("blue" = "blue", "grey" = "grey", "red" = "red")) + theme(legend.title = element_blank())
ggfinal
library(tidyverse)
process_starting_row  <- 600
per_validation_period <- 30
number_of_validations <- 5
graphical_data <- data.frame(x= 1:(process_starting_row + 1 + (number_of_validations)*per_validation_period))
for (it in 1:number_of_validations) {
# For this graph there is always a line and then a color component explaining each one...
graphical_data[,paste0("iteration",it,"line")]   <- c(it)
# First make the whole row grey and then "dolly up" the colors.
graphical_data[,paste0("iteration",it,"colour")] <- "grey"
graphical_data[1:(process_starting_row + (it-1)*per_validation_period), paste0("iteration",it,"colour")] <- "blue"
graphical_data[(process_starting_row + 1 + (it)*per_validation_period), paste0("iteration",it,"colour")] <- "red"
}
#graphical_data
ggbase <- ggplot(data = graphical_data, aes(x=x)) +
coord_cartesian(xlim = c(process_starting_row-1*per_validation_period, nrow(graphical_data))) +
theme_bw()
gg_adding <- function(data, iteration_sub, color_sub){
iteration_promise <- sym(iteration_sub)
colour_promise <- sym(color_sub)
gg  <- geom_point(data = data, aes(x= x, y= !! iteration_promise, color = !! colour_promise))
return(gg)
}
ggaddfor <- function(data, gg){
ggout <- gg
for (it in 1:number_of_validations) {
#print(it)
iterationsub <- paste0("iteration",it,"line")
coloursub <- paste0("iteration",it,"colour")
ggout <- ggout + gg_adding(data, iterationsub, coloursub)
}
return(ggout)
}
# Not working
ggiterated <- ggaddfor(graphical_data, ggbase)
ggfinal <- ggiterated + labs(x="Data points", y = "Iteration") + scale_color_manual(values = c("blue" = "blue", "grey" = "grey", "red" = "red")) + theme(legend.position="none")
ggfinal
library(prophethyperbayes)
library(prophethyperbayes)
